{% if product %}
  <script>
    async function initializeCrossSell() {
      try {
        const recommendations = await fetchRecommendations();
        const products = await fetchProductDetails(recommendations);
        createProductList(products);
      } catch (e) {
        console.error('Error initializing cross sell', e);
      }
    }

    async function fetchRecommendations() {
      const url =
        '/apps/demo-proxy/json?handle={{ product.handle }}&numRecs={{ block.settings.number_of_recommendations }}';
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'ngrok-skip-browser-warning': 'true',
        },
      });
      const data = await response.json();
      return data.Recommendation;
    }

    async function fetchProductDetails(productHandles) {
      return Promise.all(productHandles.map((handle) => fetchProduct(handle)));
    }

    async function fetchProduct(handle) {
      const productUrl = `/products/${handle}.json`;
      const response = await fetch(productUrl, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'ngrok-skip-browser-warning': 'true',
        },
      });
      if (!response.ok)
        throw new Error(`HTTP error! status: ${response.status}`);
      return response.json();
    }

    function createProductList(products) {
      const section = document.getElementById('cross-sell-section');
      section.innerHTML = '';
      products.forEach((productData) => {
        const card = createSectionCard(productData.product);
        section.appendChild(card);
      });
    }

    function createSectionCard(product) {
      const card = document.createElement('div');
      card.classList.add('card', 'product-card', 'product-card--cross-sell');

      let variantsDropdown = '';
      if (product.variants.length > 1) {
        variantsDropdown = `
              <select class="product-card__variants" onchange="updateVariantId(this, ${
                product.id
              })">
                ${product.variants
                  .map(
                    (variant) =>
                      `<option value="${variant.id}">${variant.title}</option>`
                  )
                  .join('')}
              </select>
            `;
      }

      card.innerHTML = `
            <div class="product-card__image-wrapper">
              <img class="product-card__image" onclick="location.href='/products/${product.handle}'" src="${product.images[0].src}" alt="${product.images[0].alt}" loading="lazy" />
            </div>
            <div class="product-card__info">
              <h3 class="product-card__title" onclick="location.href='/products/${product.handle}'">${product.title}</h3>
              <div class="product-card__row">
                <p class="product-card__price">{{ cart.currency.symbol }} ${product.variants[0].price}</p>
                ${variantsDropdown}
              </div>
              <form method="post" action="/cart/add" class="form" id="form-${product.id}">
                <input type="hidden" name="form_type" value="product" />
                <input type="hidden" name="id" value="${product.variants[0].id}" class="product-variant-id-${product.id}"/>
                <input type="hidden" name="quantity" value="1" />
                <input type="hidden" name="return_to" value="back" />
                <div class="product-form__buttons">
                  <button type="submit" name="add" class="product-form__submit button button--full-width button--secondary">
                    <span>Add to cart</span>
                    </button>
                  </div>
                  <input type="hidden" name="product-id" value="${product.id}" />
                </form>
              </div>
          `;
      const form = card.querySelector(`#form-${product.id}`);
      form.addEventListener('submit', async function (event) {
        event.preventDefault();
        try {
          const formData = new FormData(form);
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            body: formData,
          });
          const result = await response.json();
          if (response.ok) {
            showModal('Item added to cart!', 'success');
          } else {
            console.error(result);
            showModal(
              `Could not add product to cart! Reason: ${result.description}`,
              'error'
            );
          }
        } catch (e) {
          console.error(e);
          showModal(
            'Could not add this product to your cart. Please try again later.',
            'error'
          );
        }
      });

      return card;
    }

    function updateVariantId(select, productId) {
      const variantId = select.value;
      const variantIdInput = document.querySelector(
        `.product-variant-id-${productId}`
      );
      variantIdInput.value = variantId;
    }

    function showModal(message, type = 'success') {
      const modal = document.getElementById('cta-modal');
      const modalMessage = document.getElementById('cta-modal-message');
      const modalClose = document.getElementById('cta-modal-close');
      modalMessage.textContent = message;
      modal.showModal();

      modalClose.onclick = () => {
        if (type === 'success') {
          sessionStorage.setItem('scroll-position', window.scrollY);
          window.location.reload();
        }
        modal.close();
      };
    }

    initializeCrossSell();

    document.addEventListener('DOMContentLoaded', () => {
      const savedPosition = sessionStorage.getItem('scroll-position');
      if (savedPosition) {
        window.scrollTo(0, parseInt(savedPosition, 10));
        sessionStorage.removeItem('scroll-position');
      }
    });
  </script>
{% endif %}

{% schema %}
{
  "name": "Cross-Sell - By Youp",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "recommendation_section_title",
      "label": "Section Title",
      "default": "Maak je aankoop compleet:"
    },
    {
      "type": "color",
      "id": "recommendation_text_color",
      "label": "Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "recommendation_background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "recommendation_cta_color",
      "label": "CTA Color",
      "default": "#000000"
    },
    {
      "type": "text",
      "id": "recommendation_font_size",
      "label": "Font Size",
      "default": "16px"
    },
    {
      "type": "number",
      "id": "number_of_recommendations",
      "label": "Number of Recommendations",
      "default": 4
    }
  ]
}
{% endschema %}

<h2>{{ block.settings.recommendation_section_title }}</h2>

<p>
  DEBUG: Aantal aanbevelingen: {{ block.settings.number_of_recommendations }}
</p>

<style>
  :root {
  --text-color: {{ block.settings.recommendation_text_color }};
  --background-color: {{ block.settings.recommendation_background_color }};
  --font-size: {{ block.settings.recommendation_font_size }};
  --cta-color: {{ block.settings.recommendation_cta_color }};
  }

  #cross-sell-section {
    display: flex;
    flex-wrap: nowrap;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  #cross-sell-section::-webkit-scrollbar {
    display: none;
  }

  .product-card {
    flex: 0 0 20%;
    min-width: 200px;
    margin-right: 10px;
    background: var(--background-color);
    scroll-snap-align: start;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .product-card__info {
    padding: 10px;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .product-card__image-wrapper {
    height: 150px;
    overflow: visible;
  }

  .product-card__image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    cursor: pointer;
  }

  .product-card__title {
    font-size: 20px;
    margin-bottom: 4px;
    margin-top: 0;
    height: 60px;
    width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    cursor: pointer;
  }

  .product-card__row {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .product-card__price {
    font-size: 16px;
    margin: 0;
  }

  .carousel-container {
    max-width: 100%;
    margin: auto;
  }

  dialog {
    border: none;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    padding: 20px;
    border-radius: 4px;
  }

  dialog::backdrop {
    background: rgba(0, 0, 0, 0.4);
  }

  .skeleton, .skeleton::before, .skeleton::after {
    /* Styling to make it look like a loading placeholder */
    animation: shimmer 1.5s infinite linear;
    background: linear-gradient(
        115deg,
      #f6f7f8 0%,
      #edeef1 50%,
      #f6f7f8 100%
    );
    background-size: 400% 100%;
    cursor: progress !important;
    border-radius: 0 !important;
    border: none !important;
    box-shadow: none !important;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }
</style>

<div id="cross-sell-section" class="carousel-container">
  <div class="card product-card product-card--cross-sell skeleton">
    <div class="product-card__image-wrapper">
      <div class="product-card__image"></div>
    </div>
    <div class="product-card__info">
      <h3 class="product-card__title">
        <div class="product-card__title"></div>
      </h3>
      <div class="product-card__row">
        <p class="product-card__price">
          <div class="product-card__price"></div>
        </p>
      </div>
      <div class="skeleton button button--full-width">
        <span class="skeleton"></span>
      </div>
    </div>
  </div>
  <div class="card product-card product-card--cross-sell skeleton">
    <div class="product-card__image-wrapper">
      <div class="product-card__image"></div>
    </div>
    <div class="product-card__info">
      <h3 class="product-card__title">
        <div class="product-card__title"></div>
      </h3>
      <div class="product-card__row">
        <p class="product-card__price">
          <div class="product-card__price"></div>
        </p>
      </div>
      <div class="skeleton button button--full-width">
        <span class="skeleton"></span>
      </div>
    </div>
  </div>
  <div class="card product-card product-card--cross-sell skeleton">
    <div class="product-card__image-wrapper">
      <div class="product-card__image"></div>
    </div>
    <div class="product-card__info">
      <h3 class="product-card__title">
        <div class="product-card__title"></div>
      </h3>
      <div class="product-card__row">
        <p class="product-card__price">
          <div class="product-card__price"></div>
        </p>
      </div>
      <div class="skeleton button button--full-width">
        <span class="skeleton"></span>
      </div>
    </div>
  </div>
  <div class="card product-card product-card--cross-sell skeleton">
    <div class="product-card__image-wrapper">
      <div class="product-card__image"></div>
    </div>
    <div class="product-card__info">
      <h3 class="product-card__title">
        <div class="product-card__title"></div>
      </h3>
      <div class="product-card__row">
        <p class="product-card__price">
          <div class="product-card__price"></div>
        </p>
      </div>
      <div class="skeleton button button--full-width">
        <span class="skeleton"></span>
      </div>
    </div>
  </div>
  <div class="card product-card product-card--cross-sell skeleton">
    <div class="product-card__image-wrapper">
      <div class="product-card__image"></div>
    </div>
    <div class="product-card__info">
      <h3 class="product-card__title">
        <div class="product-card__title"></div>
      </h3>
      <div class="product-card__row">
        <p class="product-card__price">
          <div class="product-card__price"></div>
        </p>
      </div>
      <div class="skeleton button button--full-width">
        <span class="skeleton"></span>
      </div>
    </div>
  </div>
</div>
<dialog id="cta-modal">
  <p id="cta-modal-message"></p>
  <button class="button button--full-width" id="cta-modal-close">Close</button>
</dialog>
