{% comment %} OUD EN NIET MEER IN DEVELOPMENT. VOOR DE NIEUWE EXTENSIE, ZIE CROSS-SELL.LIQUID {% endcomment %}





















{% comment %} NIET MEER GEBRUIKEN, ALLEEN TER VERGELIJKING MET NIEUWE CODE. {% endcomment %}
{% if product %}
  <script>
    async function getData() {
      const url =
        '/apps/demo-proxy/json?handle={{ product.handle }}&numRecs={{ block.settings.number_of_recommendations }}';
      const response = await fetch(url, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json', 'ngrok-skip-browser-warning': 'true' },
      });
      const res = await response.json();
      console.log('res', res);
      const data = res.Recommendation;
      createProductList(data);

    }

    async function createProductList(data) {
      console.log("data", data);
      const promises = data.map(item => createSectionCard(item));
      const cards = await Promise.all(promises);
      console.log("all promises resolved");
      const section = document.getElementById("cross-sell-section");
      cards.forEach(card => {
        section.appendChild(card);
      });
    }
    async function createSectionCard(productHandle) {
        try {
          const productUrl = `/products/${productHandle}.json`;
          const response = await fetch(productUrl, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              "ngrok-skip-browser-warning": "true",
            },
          });
    
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
    
          const res = await response.json();
          const product = res.product;
    
          // Creating the card element
          const card = document.createElement("div");
          card.classList.add("card", "product-card", "product-card--cross-sell");
    
          let variantsDropdown = '';
          if (product.variants.length > 1) {
            variantsDropdown += `<select class="product-card__variants" onchange="updateVariantId(this, ${product.id})">`;
            product.variants.forEach(variant => {
              variantsDropdown += `<option value="${variant.id}">${variant.title}</option>`;
            });
            variantsDropdown += '</select>';
          }
    
          card.innerHTML = `
            <div class="product-card__image-wrapper">
              <img class="product-card__image" onclick="location.href='/products/${product.handle}'" src="${product.images[0].src}" alt="${product.images[0].alt}" loading="lazy" />
            </div>
            <div class="product-card__info">
              <h3 class="product-card__title" onclick="location.href='/products/${product.handle}'">${product.title}</h3>
              <div class="product-card__row">
                <p class="product-card__price">{{ cart.currency.symbol }} ${product.variants[0].price}</p>
                ${variantsDropdown}
              </div>
              <form
                method="post"
                action="/cart/add"
                class="form"
              >
                <input type="hidden" name="form_type" value="product" />
                <input
                  type="hidden"
                  name="id"
                  value="${product.variants[0].id}"
                  class="product-variant-id-${product.id}"
                />
                <input type="hidden" name="quantity" value="1" />
                <input type="hidden" name="return_to" value="back" />
                <div class="product-form__buttons">
                  <button
                    type="submit"
                    name="add"
                    class="product-form__submit button button--full-width button--secondary"
                  >
                    <span>Add to cart</span>
                  </button>
                </div>
                <input type="hidden" name="product-id" value="${product.id}" />
              </form>
            </div>
          `;
    
          return card;
        } catch (error) {
          console.log("error", error);
          throw error;
        }
    }
    
    function updateVariantId(select, productId) {
      console.log("select", select.value);
      const variantId = select.value;
      const variantIdInput = document.querySelector(`.product-variant-id-${productId}`);
      variantIdInput.value = variantId;
    }

    getData();
  </script>
{% endif %}

{% schema %}
{
  "name": "Proxy Call",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "recommendation_section_title",
      "label": "Section Title",
      "default": "Maak je aankoop compleet:"
    },
    {
      "type": "color",
      "id": "recommendation_text_color",
      "label": "Text Color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "recommendation_background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "recommendation_cta_color",
      "label": "CTA Color",
      "default": "#000000"
    },
    {
      "type": "text",
      "id": "recommendation_font_size",
      "label": "Font Size",
      "default": "16px"
    },
    {
      "type": "number",
      "id": "number_of_recommendations",
      "label": "Number of Recommendations",
      "default": 5
    }
  ]
}
{% endschema %}

<h1>{{ block.settings.recommendation_section_title }}</h1>
<p>
  DEBUG: Aantal aanbevelingen: {{ block.settings.number_of_recommendations }}
</p>

<style>
  :root {
  --text-color: {{ block.settings.recommendation_text_color }};
  --background-color: {{ block.settings.recommendation_background_color }};
  --font-size: {{ block.settings.recommendation_font_size }};
  --cta-color: {{ block.settings.recommendation_cta_color }};
  }


  #cross-sell-section {
    display: flex;
    flex-wrap: nowrap;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  #cross-sell-section::-webkit-scrollbar {
    display: none;
  }

  .product-card {
    flex: 0 0 20%;
    min-width: 200px;
    margin-right: 10px;
    background: var(--background-color);
    scroll-snap-align: start;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .product-card__info {
    padding: 10px;
    display: flex;
    flex-direction: column;
    height: 100%;
  }


  .product-card__image-wrapper {
    height: 150px;
    overflow: visible;
  }


  .product-card__image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    cursor: pointer;
  }

  .product-card__title {
    font-size: 20px;
    margin-bottom: 4px;
    margin-top: 0;
    height: 60px;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    cursor: pointer;
  }

  .product-card__row {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .product-card__price {
    font-size: 16px;
    margin: 0;
  }

  .carousel-container {
    max-width: 100%;
    margin: auto;
  }

</style>

<div id="cross-sell-section" class="carousel-container"></div>
